import React, { useState } from 'react';
import { Note } from '../types/Note';
import { Save, Tag, Plus, X } from 'lucide-react';

interface NoteEditorProps {
  onSave: (note: Note) => void;
  onCancel: () => void;
  isCreating?: boolean;
}

const NoteEditor: React.FC<NoteEditorProps> = ({
  onSave,
  onCancel,
  isCreating = true
}) => {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [tags, setTags] = useState<string[]>([]);
  const [newTag, setNewTag] = useState('');

  const handleAddTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleAddTag();
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!title.trim()) {
      alert('Please enter a title for the note');
      return;
    }

    const newNote: Note = {
      id: '', // Will be generated by Redux
      title: title.trim(),
      content: content.trim(),
      tags: tags,
      parentId: undefined,
      children: [],
      level: 0,
      createdAt: new Date(),
      updatedAt: new Date(),
      isExpanded: true
    };

    onSave(newNote);
  };

  return (
    <div className="note-editor-modal">
      <div className="modal-header">
        <h2>{isCreating ? 'Create New Note' : 'Edit Note'}</h2>
        <button className="close-btn" onClick={onCancel}>
          <X size={20} />
        </button>
      </div>

      <form onSubmit={handleSubmit} className="note-form">
        <div className="form-group">
          <label htmlFor="title">Title *</label>
          <input
            id="title"
            type="text"
            className="form-input title-input"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            placeholder="Enter note title..."
            required
            autoFocus
          />
        </div>

        <div className="form-group">
          <label htmlFor="content">Content</label>
          <textarea
            id="content"
            className="form-textarea content-textarea"
            value={content}
            onChange={(e) => setContent(e.target.value)}
            placeholder="Enter note content..."
            rows={8}
          />
        </div>

        <div className="form-group">
          <label htmlFor="tags">Tags</label>
          <div className="tags-input-container">
            <input
              id="tags"
              type="text"
              className="tag-input"
              value={newTag}
              onChange={(e) => setNewTag(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Add a tag..."
            />
            <button 
              type="button"
              className="add-tag-btn" 
              onClick={handleAddTag}
            >
              <Plus size={16} />
            </button>
          </div>
          <div className="tags-display">
            {tags.map(tag => (
              <span key={tag} className="tag">
                #{tag}
                <button
                  type="button"
                  className="remove-tag-btn"
                  onClick={() => handleRemoveTag(tag)}
                >
                  <X size={12} />
                </button>
              </span>
            ))}
          </div>
        </div>

        <div className="form-actions">
          <button type="button" className="cancel-btn" onClick={onCancel}>
            Cancel
          </button>
          <button type="submit" className="save-btn">
            <Save size={16} />
            {isCreating ? 'Create Note' : 'Save Changes'}
          </button>
        </div>
      </form>
    </div>
  );
};

export default NoteEditor;
